package jp.idumo.java.parts.receiptor;

import jp.idumo.java.annotation.IDUMOCommon;
import jp.idumo.java.annotation.IDUMOInfo;
import jp.idumo.java.annotation.IDUMOReceiptor;
import jp.idumo.java.exception.IDUMOException;
import jp.idumo.java.exec.IfCoreController;
import jp.idumo.java.model.FlowingData;
import jp.idumo.java.model.IfDataElement;
import jp.idumo.java.model.connect.ConnectDataType;
import jp.idumo.java.model.primitive.IfStringPrimitiveElement;
import jp.idumo.java.parts.IfExecutable;
import jp.idumo.java.parts.IfReceivable;
import jp.idumo.java.parts.IfSendable;
import jp.idumo.java.util.LogManager;
import jp.idumo.java.validator.IfReceiveValidator;
import jp.idumo.java.validator.ReceiveValidatorSize;
import jp.idumo.java.validator.ReceiveValidatorType;

/**
 * @author Yusei SHIGENOBU
 * 
 * Receiptorテンプレートです．
 * 細かい記述等は既存のReceiptorモジュールを参考にしていただければと思います．
 * 
 * 接続されるProviderやHandlerモジュールから受け取ったデータを処理したり，
 * 接続されるモジュールでtrueと判定された場合に処理を実行するといった
 * 次のモジュールにデータを渡さずに処理が完結されるモジュールがReceiptorに該当します．
 * 
 */
@IDUMOCommon
@IDUMOReceiptor(receive = IfDataElement.class)
@IDUMOInfo(author = "作成者名", display = "モジュール名", summary = "モジュール機能の詳細")
public class TemplateReceiptor implements IfReceivable, IfCoreController, IfExecutable {
	private IfSendable			sender;
	private IfReceiveValidator	vSize	= new ReceiveValidatorSize(1);
	private IfReceiveValidator	vType	= new ReceiveValidatorType(1, IfStringPrimitiveElement.class);
		
	@Override
	public boolean isReady() {
		LogManager.log();
		return sender.isReady();
	}
	
	@Override
	public void onIdumoStart() {
		LogManager.log();
	}
	
	@Override
	public void onIdumoStop() {
	}
	
	@Override
	public ConnectDataType receivableType() {
		return null;
	}
	
	@Override
	public void run() {
		LogManager.log();
		if (!sender.isReady()) {
			return;
		}
		FlowingData data = sender.onCall();
		if (data == null) {
			return;
		}
		for (Object o : data) {
			LogManager.debug(o.toString());
		}
	}
	
	@Override
	public void setSender(IfSendable... senders) throws IDUMOException {
		vSize.validate(senders);
		vType.validate(senders);
		sender = senders[0];
	}
	
}
